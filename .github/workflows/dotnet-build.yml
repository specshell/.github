# This workflow is used to build and push NuGet Packages and Chocolatey Packages
name: DotNet build and push

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      test-timeout:
        required: false
        type: number
        default: 10
      push-nuget:
        required: false
        type: boolean
        default: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      push-chocolatey:
        required: false
        type: boolean
        default: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      code-sign:
        required: false
        type: boolean
        default: true
      dotnet_publish_command:
        required: false
        type: string
        default: 'dotnet publish --configuration Release --no-build --no-restore'
      dotnet_pack_command:
        required: false
        type: string
        default: 'dotnet pack --configuration Release --no-restore'
      dotnet_build_debug_command:
        required: false
        type: string
        default: 'dotnet build -c Debug --no-restore'
      dotnet_build_release_command:
        required: false
        type: string
        default: 'dotnet build -c Release --no-restore'
      before_build:
        default: ''
        required: false
        type: string
      dotnet-version: 
        required: false
        type: string
        default: '6.0.x'   
    secrets:
      package_user:
        required: true
      package_password:
        required: true
      package_nuget_feed:
        required: true
      push_nuget_feed:
        required: false
      push_nuget_api_key:
        required: false
      push_chocolatey_feed:
        required: false
      push_chocolatey_api_key:
        required: false
      codecov_token:
        required: false
      code_sign_password:
        required: false
      code_sign_pfx:
        required: false

jobs:
  build:
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      POWERSHELL_TELEMETRY_OPTOUT: 1
    defaults:
      run:
        shell: pwsh
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v3.2.2
        with:
          path: |
            ~/.nuget/packages
            .dotnet/tools
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v3.0.2
        with:
          dotnet-version: ${{inputs.dotnet-version}}

      - name: Restore dependencies
        run: |
          dotnet nuget add source "${{ secrets.package_nuget_feed }}" -n nugetfeed -u '${{ secrets.package_user }}' -p '${{ secrets.package_password }}' --store-password-in-clear-text
          dotnet restore
          dotnet nuget remove source nugetfeed

      - name: Setup certificate
        if: |
          inputs.code-sign &&
          (inputs.push-nuget || inputs.push-chocolatey)
        run: |
          [System.IO.File]::WriteAllBytes("./cert.pfx", [System.Convert]::FromBase64String("${{ secrets.code_sign_pfx }}"))
          if ($IsLinux) {
            echo "Installing osslsigncode"
            sudo apt-get install -qq -y osslsigncode
          }

      - name: Before Build
        if: inputs.before_build != ''
        run: |
          ${{ inputs.before_build }}

      - name: Build Debug
        run:  ${{ inputs.dotnet_build_debug_command }}

      - name: Build Release
        env:
          CERT_PASSWORD: "${{ secrets.code_sign_password }}"
        run: ${{ inputs.dotnet_build_release_command }}

      - name: Publish Release
        run: ${{ inputs.dotnet_publish_command }}

      - name: Pack Release
        run: ${{ inputs.dotnet_pack_command }}

      - name: Test Release
        timeout-minutes: 10
        run: |
          if (Test-Path './coverlet.runsettings') {
            dotnet test -c Release --collect:"XPLat Code Coverage" --settings coverlet.runsettings --results-directory "coverage" --verbosity normal --no-build --no-restore
          }
          else {
            dotnet test -c Release --collect:"XPLat Code Coverage" --results-directory "coverage" --verbosity normal --no-build --no-restore
          }

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.codecov_token }}
          directory: ./coverage
          name: codecov-specshell
          fail_ci_if_error: false
          verbose: false

      - name: Check for NuGet packages
        id: check-for-nuget-packages
        run: |
          if ($IsWindows) {
            $nugetPackages = "$ENV:GITHUB_WORKSPACE\output\nuget\*.nupkg"
          } else {
            $nugetPackages = "$ENV:GITHUB_WORKSPACE/output/nuget/*.nupkg"
          }
          if (Test-Path $nugetPackages) {
            echo "::set-output name=nuget-package::true"
            echo "NuGet packages detected: $nugetPackages"
          } else {
            echo "::set-output name=nuget-package::false"
            echo "No NuGet packages detected"
          }
          echo "::set-output name=nuget-package-path::$nugetPackages"

      - name: Check for Chocolatey Packages
        id: check-for-chocolatey-packages
        run: |
          if ($IsWindows) {
            $chocolateyPackages = "$ENV:GITHUB_WORKSPACE\output\chocolatey\*.nupkg"
          } else {
            $chocolateyPackages = "$ENV:GITHUB_WORKSPACE/output/chocolatey/*.nupkg"
          }
          if (Test-Path $chocolateyPackages) {
            echo "::set-output name=chocolatey-package::true"
            echo "Chocolatey packages detected: $chocolateyPackages"
          } else {
            echo "::set-output name=chocolatey-package::false"
            echo "No Chocolatey packages detected"
          }
          echo "::set-output name=chocolatey-package-path::$chocolateyPackages"

      - name: Push NuGet packages
        env:
          NUGET_API_KEY: ${{ secrets.push_nuget_api_key }}
        if: |
          inputs.push-nuget &&
          steps.check-for-nuget-packages.outputs.nuget-package == 'true' &&
          env.NUGET_API_KEY != ''
        run: |
          dotnet nuget push "${{ steps.check-for-nuget-packages.outputs.nuget-package-path }}" --source "${{ secrets.push_nuget_feed }}" --api-key '${{ env.NUGET_API_KEY }}' --skip-duplicate

      - name: Push Chocolatey packages
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.push_chocolatey_api_key }}
        if: |
          inputs.push-chocolatey &&
          steps.check-for-chocolatey-packages.outputs.chocolatey-package == 'true' &&
          env.CHOCOLATEY_API_KEY != ''
        run: |
          dotnet nuget push "${{ steps.check-for-chocolatey-packages.outputs.chocolatey-package-path }}" --source "${{ secrets.push_chocolatey_feed }}" --api-key '${{ env.CHOCOLATEY_API_KEY }}' --skip-duplicate

      - name: Post Setup certificate
        if: |
          inputs.code-sign &&
          (inputs.push-nuget || inputs.push-chocolatey)
        run: |
          Remove-Item ./cert.pfx
